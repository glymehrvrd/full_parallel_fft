library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity top is
      Port ( A : in  STD_LOGIC;
             clk : in  STD_LOGIC;
             rst : in  STD_LOGIC;
             B : out  STD_LOGIC);
end top;

architecture Behavioral of top is

{% for Dff_delay in Dff_list %}
component Dff_{{ Dff_delay[0] }}{{ '_init_1' if Dff_delay[1] else '' }} is
      Port ( D : in  STD_LOGIC;
             clk : in  STD_LOGIC;
             rst : in  STD_LOGIC;
             Q : out  STD_LOGIC);
end component;

{% endfor %}

component one_bit_full_adder is
      Port ( A : in  STD_LOGIC;
             B : in  STD_LOGIC;
             C_IN : in STD_LOGIC;
             S : out  STD_LOGIC;
             C_OUT : out  STD_LOGIC);
end component;

{% set SR_length = starters[-1][0] - starters[0][0] %}
{% set calc_vertical_length = starters|length %}
signal data : std_logic_vector({{ SR_length }} downto 1);
signal s: std_logic_vector({{ calc_vertical_length-2 }} downto 0);
signal s_buff: std_logic_vector({{ calc_vertical_length-2 }} downto 0);
signal c: std_logic_vector({{ calc_vertical_length-1 }} downto 0);
signal c_buff: std_logic_vector({{ calc_vertical_length-1 }} downto 0);

begin
    --- shift register of length k
    {% if SR_length!=0 %}
    D_DATA_1: Dff_1 port map (A, clk, rst, data(1));
    {% if SR_length>1 %}
    GEN_D_DATA:
    for I in 2 to {{ SR_length }} generate
        DX_DATA : Dff_1 port map (data(I-1), clk, rst, data(I));
    end generate GEN_D_DATA;
    {% endif %}
    {% endif %}

    {% for i in range(calc_vertical_length) %}
    C_BUFF{{ i }} : Dff_1{{'_init_1' if starters[i][1]=='-' else ''}} port map(c({{ i }}), clk, rst, c_buff({{ i }}));
    ADDER{{ i }} : one_bit_full_adder port map ({{ '\'0\'' if loop.first else 's(%d)'|format(i-1) }}, {{ 'not ' if starters[i][1]=='-' else '' }}{{ 'A' if loop.first else 'data(%d)'|format(starters[i][0]-starters[0][0]) }}, c_buff({{ i }}), {{ 'B' if loop.last else 's(%d)'|format(i) }}, c({{ i }}));

    {% endfor %}
end Behavioral;

