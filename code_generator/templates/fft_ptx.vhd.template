library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

{% set component_name='fft_pt'~point %}
{% set lhs_component_name='fft_pt'~lhs_point %}
{% set rhs_component_name='fft_pt'~rhs_point %}

entity {{ component_name }} is
    GENERIC (
        ctrl_start     : INTEGER := 0
    );
    PORT (
        tmp_first_stage_re_out, tmp_first_stage_im_out: out std_logic_vector({{ point-1 }} downto 0);
        tmp_mul_re_out, tmp_mul_im_out : out std_logic_vector({{ point-1 }} downto 0);

        clk            : IN STD_LOGIC;
        rst            : IN STD_LOGIC;
        ce             : IN STD_LOGIC;
        {% if istop %}
        ctrl           : IN STD_LOGIC;
        {% else %}
        ctrl_delay     : IN STD_LOGIC_VECTOR(15 downto 0);
        {% endif %}

        data_re_in:in std_logic_vector({{ point-1 }} downto 0);
        data_im_in:in std_logic_vector({{ point-1 }} downto 0);

        data_re_out:out std_logic_vector({{ point-1 }} downto 0);
        data_im_out:out std_logic_vector({{ point-1 }} downto 0)
    );
end {{ component_name }};

architecture Behavioral of {{ component_name }} is

component {{ lhs_component_name }} is
    GENERIC (
        ctrl_start       : INTEGER
    );
    PORT (
        clk            : IN STD_LOGIC;
        rst            : IN STD_LOGIC;
        ce             : IN STD_LOGIC;
        ctrl_delay     : IN STD_LOGIC_VECTOR(15 downto 0);

        data_re_in:in std_logic_vector({{ lhs_point-1 }} downto 0);
        data_im_in:in std_logic_vector({{ lhs_point-1 }} downto 0);

        data_re_out:out std_logic_vector({{ lhs_point-1 }} downto 0);
        data_im_out:out std_logic_vector({{ lhs_point-1 }} downto 0)
    );
end component;

{% if lhs_point!=rhs_point %}
component {{ rhs_component_name }} is
    GENERIC (
        ctrl_start       : INTEGER
    );
    PORT (
        clk            : IN STD_LOGIC;
        rst            : IN STD_LOGIC;
        ce             : IN STD_LOGIC;
        ctrl_delay     : IN STD_LOGIC_VECTOR(15 downto 0);

        data_re_in     : in std_logic_vector({{ rhs_point-1 }} downto 0);
        data_im_in     : in std_logic_vector({{ rhs_point-1 }} downto 0);

        data_re_out     : out std_logic_vector({{ rhs_point-1 }} downto 0);
        data_im_out     : out std_logic_vector({{ rhs_point-1 }} downto 0)
    );
end component;
{% endif %}

component complex_multiplier is
    GENERIC (
        re_multiplicator : INTEGER;
        im_multiplicator : INTEGER;
        ctrl_start       : INTEGER
    );
    PORT (
        clk             : IN std_logic;
        rst             : IN std_logic;
        ce              : IN std_logic;
        ctrl_delay      : IN STD_LOGIC_VECTOR(15 downto 0);
        data_re_in      : IN std_logic;
        data_im_in      : IN std_logic;
        product_re_out  : OUT STD_LOGIC;
        product_im_out  : OUT STD_LOGIC
    );
end component;

component multiplier_mul1 IS
    GENERIC (
        ctrl_start : INTEGER := 0
    );
    PORT (
        clk             : IN std_logic;
        rst             : IN std_logic;
        ce              : IN std_logic;
        ctrl_delay      : IN std_logic_vector(15 DOWNTO 0);
        data_re_in      : IN std_logic;
        data_im_in      : IN std_logic;
        product_re_out  : OUT STD_LOGIC;
        product_im_out  : OUT STD_LOGIC
    );
END component;

component multiplier_mulminusj IS
    GENERIC (
        ctrl_start : INTEGER := 0
    );
    PORT (
        clk             : IN std_logic;
        rst             : IN std_logic;
        ce              : IN std_logic;
        ctrl_delay      : IN std_logic_vector(15 DOWNTO 0);
        data_re_in      : IN std_logic;
        data_im_in      : IN std_logic;
        product_re_out  : OUT STD_LOGIC;
        product_im_out  : OUT STD_LOGIC
    );
END component;

COMPONENT Dff_regN_Nout IS
    GENERIC (N : INTEGER);
    PORT (
        D    : IN STD_LOGIC;
        clk  : IN STD_LOGIC;
        Q    : OUT STD_LOGIC_VECTOR(N - 1 DOWNTO 0);
        QN   : OUT STD_LOGIC_VECTOR(N - 1 DOWNTO 0)
    );
END COMPONENT;

signal first_stage_re_out, first_stage_im_out: std_logic_vector({{ point-1 }} downto 0);
signal mul_re_out, mul_im_out : std_logic_vector({{ point-1 }} downto 0);

{% if istop %}
SIGNAL ctrl_delay : std_logic_vector(15 downto 0);
{% endif %}

begin
    {% if istop %}
    --- create ctrl_delay signal in top module
    ctrl_delay(0) <= ctrl;
    --- buffer for ctrl
    UDFF_CTRL : Dff_regN_Nout
    GENERIC MAP(
        N => 15
    )
    PORT MAP(
        D           => ctrl, 
        clk         => clk, 
        Q           => ctrl_delay(15 DOWNTO 1)
    );

    {% endif %}

    tmp_first_stage_re_out <= first_stage_re_out;
    tmp_first_stage_im_out <= first_stage_im_out;
    tmp_mul_re_out <= mul_re_out;
    tmp_mul_im_out <= mul_im_out;

    --- left-hand-side processors
    {% for i in range(rhs_point) %}
    UL{{lhs_component_name|upper}}_{{i}} : {{ lhs_component_name }}
    generic map(
        ctrl_start => ctrl_start
    )
    port map(
            clk => clk,
            rst => rst,
            ce => ce,
            ctrl_delay => ctrl_delay,
            {% for j in range(lhs_point) %}
            data_re_in({{j}}) => data_re_in({{i+j*rhs_point}}),
            {% endfor %}
            {% for j in range(lhs_point) %}
            data_im_in({{j}}) => data_im_in({{i+j*rhs_point}}),
            {% endfor %}
            {% for j in range(lhs_point) %}
            data_re_out({{j}}) => first_stage_re_out({{i+j*rhs_point}}),
            {% endfor %}
            {% for j in range(lhs_point) %}
            data_im_out({{j}}) => first_stage_im_out({{i+j*rhs_point}}){{',' if not loop.last}}
            {% endfor %}
        );

    {% endfor %}

    --- right-hand-side processors
    {% for i in range(lhs_point) %}
    UR{{rhs_component_name|upper}}_{{i}} : {{ rhs_component_name }}
    generic map(
        ctrl_start => (ctrl_start+{{delay['rhs_fft']}}) mod 16
    )
    port map(
            clk => clk,
            rst => rst,
            ce => ce,
            ctrl_delay => ctrl_delay,
            {% for j in range(rhs_point) %}
            data_re_in({{j}})=>mul_re_out({{index[i][j]}}),
            {% endfor %}
            {% for j in range(rhs_point) %}
            data_im_in({{j}})=>mul_im_out({{index[i][j]}}),
            {% endfor %}
            {% for j in range(rhs_point) %}
            data_re_out({{j}}) => data_re_out({{i+j*lhs_point}}),
            {% endfor %}
            {% for j in range(rhs_point) %}
            data_im_out({{j}}) => data_im_out({{i+j*lhs_point}}){{',' if not loop.last}}
            {% endfor %}
        );           

    {% endfor %}

    --- multipliers
    {% for i in range(point) %} 
   {% if w[(i/rhs_point)|int][i%rhs_point]==(2**14,0) %}
    UMUL_{{i}} : multiplier_mul1
    generic map(
            ctrl_start => (ctrl_start+{{delay['shifter']}}) mod 16
        )
    port map(
            clk => clk,
            rst => rst,
            ce => ce,
            ctrl_delay => ctrl_delay,
            data_re_in => first_stage_re_out({{i}}),
            data_im_in => first_stage_im_out({{i}}),
            product_re_out => mul_re_out({{i}}),
            product_im_out => mul_im_out({{i}})
        );

    {% elif w[(i/rhs_point)|int][i%rhs_point]==(0,-(2**14)) %}
    UMUL_{{i}} : multiplier_mulminusj
    generic map(
            ctrl_start => (ctrl_start+{{delay['shifter']}}) mod 16
        )
    port map(
            clk => clk,
            rst => rst,
            ce => ce,
            ctrl_delay => ctrl_delay,
            data_re_in => first_stage_re_out({{i}}),
            data_im_in => first_stage_im_out({{i}}),
            product_re_out => mul_re_out({{i}}),
            product_im_out => mul_im_out({{i}})
        );

    {% else %}
    UMUL_{{i}} : complex_multiplier
    generic map(
            re_multiplicator => {{w[(i/rhs_point)|int][i%rhs_point][0]}}, --- {{w[(i/rhs_point)|int][i%rhs_point][0]/2.0**14}} + j{{w[(i/rhs_point)|int][i%rhs_point][1]/2.0**14}}
            im_multiplicator => {{w[(i/rhs_point)|int][i%rhs_point][1]}},
            ctrl_start => (ctrl_start+{{delay['mul']}}) mod 16
        )
    port map(
            clk => clk,
            rst => rst,
            ce => ce,
            ctrl_delay => ctrl_delay,
            data_re_in => first_stage_re_out({{i}}),
            data_im_in => first_stage_im_out({{i}}),
            product_re_out => mul_re_out({{i}}),
            product_im_out => mul_im_out({{i}})
        );

    {% endif %}
    {% endfor %}
end Behavioral;

