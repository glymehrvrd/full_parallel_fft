library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

{% set component_name='fft_pt'~point %}
{% set lhs_component_name='fft_pt'~lhs_point %}
{% set rhs_component_name='fft_pt'~rhs_point %}

entity {{ component_name }} is
    PORT (
        clk            : IN STD_LOGIC;
        rst            : IN STD_LOGIC;
        ce             : IN STD_LOGIC;
        ctrl           : IN STD_LOGIC;

        data_re_in:in std_logic_vector({{ point-1 }} downto 0);
        data_im_in:in std_logic_vector({{ point-1 }} downto 0);

        data_re_out:out std_logic_vector({{ point-1 }} downto 0);
        data_im_out:out std_logic_vector({{ point-1 }} downto 0)
    );
end {{ component_name }};

architecture Behavioral of {{ component_name }} is

component {{ lhs_component_name }} is
    PORT (
        clk            : IN STD_LOGIC;
        rst            : IN STD_LOGIC;
        ce             : IN STD_LOGIC;
        ctrl           : IN STD_LOGIC;

        data_re_in:in std_logic_vector({{ lhs_point-1 }} downto 0);
        data_im_in:in std_logic_vector({{ lhs_point-1 }} downto 0);

        data_re_out:out std_logic_vector({{ lhs_point-1 }} downto 0);
        data_im_out:out std_logic_vector({{ lhs_point-1 }} downto 0)
    );
end component;

component {{ rhs_component_name }} is
    PORT (
        clk            : IN STD_LOGIC;
        rst            : IN STD_LOGIC;
        ce             : IN STD_LOGIC;
        ctrl           : IN STD_LOGIC;

        data_re_in     : in std_logic_vector({{ rhs_point-1 }} downto 0);
        data_im_in     : in std_logic_vector({{ rhs_point-1 }} downto 0);

        data_re_out     : out std_logic_vector({{ rhs_point-1 }} downto 0);
        data_im_out     : out std_logic_vector({{ rhs_point-1 }} downto 0)
    );
end component;

component mul_N_k is
    PORT (
        clk          : IN std_logic;
        rst          : IN std_logic;
        ce           : IN std_logic;
        ctrl         : IN STD_LOGIC;
        data_re_in        : IN std_logic;
        data_im_in        : IN std_logic;
        product_re_out  : OUT STD_LOGIC;
        product_im_out  : OUT STD_LOGIC
    );
end component;

signal first_stage_re_out, first_stage_im_out: std_logic_vector({{ point-1 }} downto 0);
signal mul_re_out, mul_im_out : std_logic_vector({{ point-1 }} downto 0);

begin

    --- left-hand-side processors
    {% for i in range(rhs_point) %}
    U{{lhs_component_name|upper}}_{{i}} : {{ lhs_component_name }}
    port map(
            clk=>clk,
            rst=>rst,
            ce=>ce,
            ctrl=>ctrl,
            data_re_in=>({% for j in range(0,point,rhs_point)|reverse %}{{'data_re_in(%d)'|format(j)}}{{',' if not loop.last}}{% endfor %}),
            data_im_in=>({% for j in range(0,point,rhs_point)|reverse %}{{'data_im_in(%d)'|format(j)}}{{',' if not loop.last}}{% endfor %}),
            data_re_out=>first_stage_re_out({{lhs_point*(i+1)-1}} downto {{lhs_point*i}}),
            data_im_out=>first_stage_im_out({{lhs_point*(i+1)-1}} downto {{lhs_point*i}})
        );

    {% endfor %}

    --- right-hand-side processors
    {% for i in range(lhs_point) %}
    U{{rhs_component_name|upper}}_{{i}} : {{ rhs_component_name }}
    port map(
            clk=>clk,
            rst=>rst,
            ce=>ce,
            ctrl=>ctrl,
            {% for j in range(rhs_point) %}
            data_re_in({{j}})=>mul_re_out({{index[i][j]}}),
            {% endfor %}
            {% for j in range(rhs_point) %}
            data_im_in({{j}})=>mul_im_out({{index[i][j]}}),
            {% endfor %}
            data_re_out=>data_re_out({{rhs_point*(i+1)-1}} downto {{rhs_point*i}}),
            data_im_out=>data_im_out({{rhs_point*(i+1)-1}} downto {{rhs_point*i}})
        );           

    {% endfor %}

    --- multipliers
    {% for i in range(point) %}
    {% if w[i]==1 %}
    mul_re_out({{i}})<=first_stage_re_out({{i}});
    mul_im_out({{i}})<=first_stage_im_out({{i}});

    {% else %}
    UMUL_{{i}} : mul_N_k
    port map(
            clk=>clk,
            rst=>rst,
            ce=>ce,
            ctrl=>ctrl,
            data_re_in=>data_re_out({{i}}),
            data_im_in=>data_im_in({{i}}),
            product_re_out=>mul_re_out({{i}}),
            product_im_out=>mul_im_out({{i}})
        );

    {% endif %}
    {% endfor %}
end Behavioral;

