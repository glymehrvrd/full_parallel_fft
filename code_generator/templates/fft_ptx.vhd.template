library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

{% set component_name='fft_pt'~point %}
{% set lhs_component_name='fft_pt'~lhs_point %}
{% set rhs_component_name='fft_pt'~rhs_point %}

entity {{ component_name }} is
    GENERIC (
        ctrl_start     : INTEGER := 0
    );
    PORT (
        tmp_first_stage_re_out, tmp_first_stage_im_out: OUT STD_LOGIC_VECTOR({{ point-1 }} DOWNTO 0);
        tmp_mul_re_out, tmp_mul_im_out : OUT STD_LOGIC_VECTOR({{ point-1 }} DOWNTO 0);

        clk            : IN STD_LOGIC;
        rst            : IN STD_LOGIC;
        ce             : IN STD_LOGIC;
        {% if istop %}
        bypass         : IN STD_LOGIC_VECTOR({{lhs_point|log2-1}} DOWNTO 0);
        ctrl           : IN STD_LOGIC;
        {% else %}
        bypass         : IN STD_LOGIC_VECTOR({{point|log2-1}} DOWNTO 0);
        ctrl_delay     : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
        {% endif %}

        data_re_in     : IN STD_LOGIC_VECTOR({{ point-1 }} DOWNTO 0);
        data_im_in     : IN STD_LOGIC_VECTOR({{ point-1 }} DOWNTO 0);

        data_re_out    : OUT STD_LOGIC_VECTOR({{ point-1 }} DOWNTO 0);
        data_im_out    : OUT STD_LOGIC_VECTOR({{ point-1 }} DOWNTO 0)
    );
end {{ component_name }};

architecture Behavioral of {{ component_name }} is

component {{ lhs_component_name }} is
    GENERIC (
        ctrl_start     : INTEGER
    );
    PORT (
        clk            : IN STD_LOGIC;
        rst            : IN STD_LOGIC;
        ce             : IN STD_LOGIC;
        {% if lhs_point==2 %}
        bypass         : IN STD_LOGIC;
        {% else %}
        bypass         : IN STD_LOGIC_VECTOR({{lhs_point|log2-1}} DOWNTO 0);
        {% endif %}
        ctrl_delay     : IN STD_LOGIC_VECTOR(15 DOWNTO 0);

        data_re_in     : IN STD_LOGIC_VECTOR({{ lhs_point-1 }} DOWNTO 0);
        data_im_in     : IN STD_LOGIC_VECTOR({{ lhs_point-1 }} DOWNTO 0);

        data_re_out    : OUT STD_LOGIC_VECTOR({{ lhs_point-1 }} DOWNTO 0);
        data_im_out    : OUT STD_LOGIC_VECTOR({{ lhs_point-1 }} DOWNTO 0)
    );
end component;

{% if lhs_point!=rhs_point %}
component {{ rhs_component_name }} is
    GENERIC (
        ctrl_start       : INTEGER
    );
    PORT (
        clk            : IN STD_LOGIC;
        rst            : IN STD_LOGIC;
        ce             : IN STD_LOGIC;
        {% if rhs_point==2 %}
        bypass         : IN STD_LOGIC;
        {% else %}
        bypass         : IN STD_LOGIC_VECTOR({{rhs_point|log2-1}} DOWNTO 0);
        {% endif %}
        ctrl_delay     : IN STD_LOGIC_VECTOR(15 DOWNTO 0);

        data_re_in     : IN STD_LOGIC_VECTOR({{ rhs_point-1 }} DOWNTO 0);
        data_im_in     : IN STD_LOGIC_VECTOR({{ rhs_point-1 }} DOWNTO 0);

        data_re_out     : OUT STD_LOGIC_VECTOR({{ rhs_point-1 }} DOWNTO 0);
        data_im_out     : OUT STD_LOGIC_VECTOR({{ rhs_point-1 }} DOWNTO 0)
    );
end component;
{% endif %}

component complex_multiplier is
    GENERIC (
        ctrl_start       : INTEGER
    );
    PORT (
        clk              : IN STD_LOGIC;
        rst              : IN STD_LOGIC;
        ce               : IN STD_LOGIC;
        bypass           : IN STD_LOGIC;
        ctrl_delay       : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
        data_re_in       : IN STD_LOGIC;
        data_im_in       : IN STD_LOGIC;
        re_multiplicator : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
        im_multiplicator : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
        data_re_out      : OUT STD_LOGIC;
        data_im_out      : OUT STD_LOGIC
    );
end component;

component multiplier_mul1 IS
    GENERIC (
        ctrl_start : INTEGER := 0
    );
    PORT (
        clk             : IN STD_LOGIC;
        rst             : IN STD_LOGIC;
        ce              : IN STD_LOGIC;
        bypass          : IN STD_LOGIC;
        ctrl_delay      : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
        data_re_in      : IN STD_LOGIC;
        data_im_in      : IN STD_LOGIC;
        data_re_out     : OUT STD_LOGIC;
        data_im_out     : OUT STD_LOGIC
    );
END component;

component multiplier_mulminusj IS
    GENERIC (
        ctrl_start : INTEGER := 0
    );
    PORT (
        clk             : IN STD_LOGIC;
        rst             : IN STD_LOGIC;
        ce              : IN STD_LOGIC;
        bypass          : IN STD_LOGIC;
        ctrl_delay      : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
        data_re_in      : IN STD_LOGIC;
        data_im_in      : IN STD_LOGIC;
        data_re_out     : OUT STD_LOGIC;
        data_im_out     : OUT STD_LOGIC
    );
END component;

COMPONENT Dff_regN_Nout IS
    GENERIC (N : INTEGER);
    PORT (  
        D      : IN STD_LOGIC;
        clk    : IN STD_LOGIC;
        Q      : OUT STD_LOGIC_VECTOR(N - 1 DOWNTO 0);
        QN     : OUT STD_LOGIC_VECTOR(N - 1 DOWNTO 0)
    );
END COMPONENT;

--- multiplicator declaration
type ArrOfStdlogic is array (0 to {{lhs_point-1}}, 0 to {{rhs_point-1}}) of STD_LOGIC_VECTOR(15 downto 0);
signal re_multiplicator, im_multiplicator : ArrOfStdlogic;

signal first_stage_re_out, first_stage_im_out: STD_LOGIC_VECTOR({{ point-1 }} DOWNTO 0);
signal mul_re_out, mul_im_out : STD_LOGIC_VECTOR({{ point-1 }} DOWNTO 0);

{% if istop %}
SIGNAL ctrl_delay : STD_LOGIC_VECTOR(15 DOWNTO 0);

{% endif %}
begin
    --- multiplicator definition
    {% for i in range(lhs_point) %}
        {% for j in range(rhs_point) %}
            {% if w[i][j]!=(2**14,0) and w[i][j]!=(0,-(2**14)) %}
    re_multiplicator({{i}},{{j}}) <= "{{w[i][j][0]|to_bin}}"; ---  {{w[i][j][0]/2.0**14}}
    im_multiplicator({{i}},{{j}}) <= "{{w[i][j][1]|to_bin}}"; --- j{{w[i][j][1]/2.0**14}}
            {% endif %}
        {% endfor %}
    {% endfor %}

    {% if istop %}
    --- create ctrl_delay signal IN top module
    ctrl_delay(0) <= ctrl;
    --- buffer for ctrl
    UDFF_CTRL : Dff_regN_Nout
    GENERIC MAP(
        N => 15
    )
    PORT MAP(
        D           => ctrl, 
        clk         => clk, 
        Q           => ctrl_delay(15 DOWNTO 1)
    );

    {% endif %}
    tmp_first_stage_re_out <= first_stage_re_out;
    tmp_first_stage_im_out <= first_stage_im_out;
    tmp_mul_re_out <= mul_re_out;
    tmp_mul_im_out <= mul_im_out;

    --- left-hand-side processors
    {% for i in range(rhs_point) %}
    UL{{lhs_component_name|upper}}_{{i}} : {{ lhs_component_name }}
    generic map(
        ctrl_start => ctrl_start
    )
    port map(
            clk => clk,
            rst => rst,
            ce => ce,
            {% if not istop %}
            {% if lhs_point==2 %}
            bypass => bypass({{rhs_point|log2}}),
            {% else %}
            bypass => bypass({{point|log2-1}} DOWNTO {{rhs_point|log2}}),
            {% endif %}
            {% else %}
            bypass => bypass,
            {% endif %}
            ctrl_delay => ctrl_delay,
            {% for j in range(lhs_point) %}
            data_re_in({{j}}) => data_re_in({{i+j*rhs_point}}),
            {% endfor %}
            {% for j in range(lhs_point) %}
            data_im_in({{j}}) => data_im_in({{i+j*rhs_point}}),
            {% endfor %}
            {% for j in range(lhs_point) %}
            data_re_out({{j}}) => first_stage_re_out({{i+j*rhs_point}}),
            {% endfor %}
            {% for j in range(lhs_point) %}
            data_im_out({{j}}) => first_stage_im_out({{i+j*rhs_point}}){{',' if not loop.last}}
            {% endfor %}
        );

    {% endfor %}
    --- right-hand-side processors
    {% for i in range(lhs_point) %}
    UR{{rhs_component_name|upper}}_{{i}} : {{ rhs_component_name }}
    generic map(
        ctrl_start => (ctrl_start+{{delay['rhs_fft']}}) mod 16
    )
    port map(
            clk => clk,
            rst => rst,
            ce => ce,
            {% if not istop %}
            {% if rhs_point==2 %}
            bypass => bypass(0),
            {% else %}
            bypass => bypass({{rhs_point|log2-1}} DOWNTO 0),
            {% endif %}
            {% else %}
            bypass => (others => '1'),
            {% endif %}
            ctrl_delay => ctrl_delay,
            {% for j in range(rhs_point) %}
            data_re_in({{j}}) => mul_re_out({{index[i][j]}}),
            {% endfor %}
            {% for j in range(rhs_point) %}
            data_im_in({{j}}) => mul_im_out({{index[i][j]}}),
            {% endfor %}
            {% for j in range(rhs_point) %}
            data_re_out({{j}}) => data_re_out({{i+j*lhs_point}}),
            {% endfor %}
            {% for j in range(rhs_point) %}
            data_im_out({{j}}) => data_im_out({{i+j*lhs_point}}){{',' if not loop.last}}
            {% endfor %}
        );           

    {% endfor %}
    --- multipliers
    {% for i in range(point) %}
    {% if w[(i/rhs_point)|int][i%rhs_point]==(2**14,0) %}
    UMUL_{{i}} : multiplier_mul1
    generic map(
            ctrl_start => (ctrl_start+{{delay['shifter']}}) mod 16
        )
    port map(
            clk => clk,
            rst => rst,
            ce => ce,
            bypass => bypass({{rhs_point|log2 if not istop else 0}}),
            ctrl_delay => ctrl_delay,
            data_re_in => first_stage_re_out({{i}}),
            data_im_in => first_stage_im_out({{i}}),
            data_re_out => mul_re_out({{i}}),
            data_im_out => mul_im_out({{i}})
        );
    {% elif w[(i/rhs_point)|int][i%rhs_point]==(0,-(2**14)) %}
    UMUL_{{i}} : multiplier_mulminusj
    generic map(
            ctrl_start => (ctrl_start+{{delay['shifter']}}) mod 16
        )
    port map(
            clk => clk,
            rst => rst,
            ce => ce,
            bypass => bypass({{rhs_point|log2 if not istop else 0}}),
            ctrl_delay => ctrl_delay,
            data_re_in => first_stage_re_out({{i}}),
            data_im_in => first_stage_im_out({{i}}),
            data_re_out => mul_re_out({{i}}),
            data_im_out => mul_im_out({{i}})
        );
    {% else %}
    UMUL_{{i}} : complex_multiplier
    generic map(
            ctrl_start => (ctrl_start+{{delay['mul']}}) mod 16
        )
    port map(
            clk => clk,
            rst => rst,
            ce => ce,
            bypass => bypass({{rhs_point|log2 if not istop else 0}}),
            ctrl_delay => ctrl_delay,
            data_re_in => first_stage_re_out({{i}}),
            data_im_in => first_stage_im_out({{i}}),
            re_multiplicator => re_multiplicator({{(i/rhs_point)|int}},{{(i%rhs_point)|int}}), ---  {{w[(i/rhs_point)|int][i%rhs_point][0]/2.0**14}}
            im_multiplicator => im_multiplicator({{(i/rhs_point)|int}},{{(i%rhs_point)|int}}), --- j{{w[(i/rhs_point)|int][i%rhs_point][1]/2.0**14}}
            data_re_out => mul_re_out({{i}}),
            data_im_out => mul_im_out({{i}})
        );
    {% endif %}

    {% endfor %}
end Behavioral;
